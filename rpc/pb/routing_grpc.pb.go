// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: routing.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoutingClient is the client API for Routing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutingClient interface {
	RequestInvoice(ctx context.Context, in *IREQMessage, opts ...grpc.CallOption) (*IREPMessage, error)
	ProcessRREQ(ctx context.Context, in *RREQMessage, opts ...grpc.CallOption) (*RoutingResponse, error)
	ProcessRREP(ctx context.Context, in *RREPMessage, opts ...grpc.CallOption) (*RoutingResponse, error)
	ProcessFwdMessage(ctx context.Context, in *FwdMessage, opts ...grpc.CallOption) (*FwdMessageResponse, error)
	ProcessInvoiceSecret(ctx context.Context, in *InvoiceSecretMessage, opts ...grpc.CallOption) (*RoutingResponse, error)
}

type routingClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingClient(cc grpc.ClientConnInterface) RoutingClient {
	return &routingClient{cc}
}

func (c *routingClient) RequestInvoice(ctx context.Context, in *IREQMessage, opts ...grpc.CallOption) (*IREPMessage, error) {
	out := new(IREPMessage)
	err := c.cc.Invoke(ctx, "/routing.Routing/RequestInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingClient) ProcessRREQ(ctx context.Context, in *RREQMessage, opts ...grpc.CallOption) (*RoutingResponse, error) {
	out := new(RoutingResponse)
	err := c.cc.Invoke(ctx, "/routing.Routing/ProcessRREQ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingClient) ProcessRREP(ctx context.Context, in *RREPMessage, opts ...grpc.CallOption) (*RoutingResponse, error) {
	out := new(RoutingResponse)
	err := c.cc.Invoke(ctx, "/routing.Routing/ProcessRREP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingClient) ProcessFwdMessage(ctx context.Context, in *FwdMessage, opts ...grpc.CallOption) (*FwdMessageResponse, error) {
	out := new(FwdMessageResponse)
	err := c.cc.Invoke(ctx, "/routing.Routing/ProcessFwdMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingClient) ProcessInvoiceSecret(ctx context.Context, in *InvoiceSecretMessage, opts ...grpc.CallOption) (*RoutingResponse, error) {
	out := new(RoutingResponse)
	err := c.cc.Invoke(ctx, "/routing.Routing/ProcessInvoiceSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingServer is the server API for Routing service.
// All implementations must embed UnimplementedRoutingServer
// for forward compatibility
type RoutingServer interface {
	RequestInvoice(context.Context, *IREQMessage) (*IREPMessage, error)
	ProcessRREQ(context.Context, *RREQMessage) (*RoutingResponse, error)
	ProcessRREP(context.Context, *RREPMessage) (*RoutingResponse, error)
	ProcessFwdMessage(context.Context, *FwdMessage) (*FwdMessageResponse, error)
	ProcessInvoiceSecret(context.Context, *InvoiceSecretMessage) (*RoutingResponse, error)
	mustEmbedUnimplementedRoutingServer()
}

// UnimplementedRoutingServer must be embedded to have forward compatible implementations.
type UnimplementedRoutingServer struct {
}

func (UnimplementedRoutingServer) RequestInvoice(context.Context, *IREQMessage) (*IREPMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestInvoice not implemented")
}
func (UnimplementedRoutingServer) ProcessRREQ(context.Context, *RREQMessage) (*RoutingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRREQ not implemented")
}
func (UnimplementedRoutingServer) ProcessRREP(context.Context, *RREPMessage) (*RoutingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRREP not implemented")
}
func (UnimplementedRoutingServer) ProcessFwdMessage(context.Context, *FwdMessage) (*FwdMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFwdMessage not implemented")
}
func (UnimplementedRoutingServer) ProcessInvoiceSecret(context.Context, *InvoiceSecretMessage) (*RoutingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessInvoiceSecret not implemented")
}
func (UnimplementedRoutingServer) mustEmbedUnimplementedRoutingServer() {}

// UnsafeRoutingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingServer will
// result in compilation errors.
type UnsafeRoutingServer interface {
	mustEmbedUnimplementedRoutingServer()
}

func RegisterRoutingServer(s grpc.ServiceRegistrar, srv RoutingServer) {
	s.RegisterService(&Routing_ServiceDesc, srv)
}

func _Routing_RequestInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IREQMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServer).RequestInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.Routing/RequestInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServer).RequestInvoice(ctx, req.(*IREQMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routing_ProcessRREQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RREQMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServer).ProcessRREQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.Routing/ProcessRREQ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServer).ProcessRREQ(ctx, req.(*RREQMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routing_ProcessRREP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RREPMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServer).ProcessRREP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.Routing/ProcessRREP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServer).ProcessRREP(ctx, req.(*RREPMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routing_ProcessFwdMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FwdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServer).ProcessFwdMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.Routing/ProcessFwdMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServer).ProcessFwdMessage(ctx, req.(*FwdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routing_ProcessInvoiceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceSecretMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServer).ProcessInvoiceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.Routing/ProcessInvoiceSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServer).ProcessInvoiceSecret(ctx, req.(*InvoiceSecretMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Routing_ServiceDesc is the grpc.ServiceDesc for Routing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Routing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routing.Routing",
	HandlerType: (*RoutingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestInvoice",
			Handler:    _Routing_RequestInvoice_Handler,
		},
		{
			MethodName: "ProcessRREQ",
			Handler:    _Routing_ProcessRREQ_Handler,
		},
		{
			MethodName: "ProcessRREP",
			Handler:    _Routing_ProcessRREP_Handler,
		},
		{
			MethodName: "ProcessFwdMessage",
			Handler:    _Routing_ProcessFwdMessage_Handler,
		},
		{
			MethodName: "ProcessInvoiceSecret",
			Handler:    _Routing_ProcessInvoiceSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routing.proto",
}
